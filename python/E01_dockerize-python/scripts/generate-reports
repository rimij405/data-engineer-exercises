#!/bin/bash
set -e
set -o pipefail

# Define controlled values.
SCRIPT_PATH=$(realpath "$0")
OUTPUT_DIR=$(realpath $(dirname "$SCRIPT_PATH")/../src/docs)

# Define helper functions.
function help() {
  local BASENAME=$(basename "$SCRIPT_PATH")
  echo "Usage: $BASENAME [OPTIONS]

      This script generates coverage and pytest reports for a given Docker image.

      OPTIONS:
        -n, --name       Specify the Docker image name. Default is 'rimij405/datascience-exerise-01'.
        -h, --help       Display this help message and exit.

      Examples:
      ./$BASENAME -n my_image
      
      If the Docker image does not exist, it will be built from the context using the 'build-docker-image' script.

      The script generates two reports:
      1. A coverage report, which includes coverage data, a command line report with coverage details, and an HTML report.
      2. A pytest report, which is output as an HTML report.

      The reports are saved in the '/code/src/docs' directory on the repository."
}

# Initialize variables.
DOCKER_IMAGE_NAME=rimij405/datascience-exerise-01

# Loop through all the positional parameters
while (( "$#" )); do
    case "$1" in
      -n|--name)
      DOCKER_IMAGE_NAME=${2:-$DOCKER_IMAGE_NAME}
      shift 2
      break
      ;;
      -h|--help|help)
      echo "$(help)"
      exit 2
      ;;
      --) # end of argument parsing
      shift
      break
      ;;
      *) # preserve positional argumetns
      PARAMS="$PARAMS $1"
      shift
      break
      ;;
    esac
done

# Set positional arguments in their proper place
eval set -- "$PARAMS"

# Function that will generate the coverage report.
make_coverage_report() {
    local HOST_DIR="$OUTPUT_DIR/htmlcov"
    local CONTAINER_DIR=/code/src/htmlcov
    local MOUNT_PATH=$HOST_DIR:$CONTAINER_DIR
    echo "Generating the coverage report ($MOUNT_PATH)."

    # Execute command that will:
    # 1. Generate coverage data in the `/code/src` directory.
    # 2. Output command line report containing coverage details.
    # 3. Output HTML report to `/code/htmlcov/index.html`.
    docker run --rm -v $MOUNT_PATH $DOCKER_IMAGE_NAME /bin/bash -c "\
    cd /code/src && \
    pipenv run coverage run -m unittest discover && \
    pipenv run coverage report && \
    pipenv run coverage html && \
    pipenv run coverage json && \
    mv coverage.json htmlcov/coverage.json && \
    mv .coverage htmlcov/.coverage"
}

# Function that will generate the pytest report.
make_pytest_report() {
    local HOST_DIR="$OUTPUT_DIR"
    local CONTAINER_DIR=/code/src/docs
    local MOUNT_PATH=$HOST_DIR:$CONTAINER_DIR
    echo "Generating the pytest report ($MOUNT_PATH)."

    # Execute command that will:
    # 1. Output HTML report to `$OUTPUT_DIR/reports.html`.
    docker run --rm -v $MOUNT_PATH $DOCKER_IMAGE_NAME /bin/bash -c "pipenv run \
    pytest /code/src/tests --html=src/docs/report.html --self-contained-html"
}

# Check if a docker image already exists.
if [ "$(docker images -q $DOCKER_IMAGE_NAME 2> /dev/null)" == "" ]
then
    echo "Image $DOCKER_IMAGE_NAME not found. Building container from context."
    source ./build-docker-image --name $DOCKER_IMAGE_NAME
fi

# Generate the reports.
make_pytest_report
make_coverage_report


